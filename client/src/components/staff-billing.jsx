import { useEffect, useState } from "react";
import axios from "@config/axios";
import { Button } from "@components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@components/ui/card";
import {
    Table,
    TableHeader,
    TableRow,
    TableHead,
    TableBody,
    TableCell,
} from "@components/ui/table";

export default function BillingDashboard() {
    const [bills, setBills] = useState([]);
    const [openModal, setOpenModal] = useState(false);

    const fetchBills = async () => {
        try {
            const res = await axios.get("/billings/getBills");
            setBills(res.data);
        } catch (err) {
            console.error("Error fetching bills", err);
        }
    };

    useEffect(() => {
        fetchBills();
    }, []);

    return (
        <div className="p-6">
            <Card className="shadow-lg">
                <CardHeader className="flex justify-between items-center">
                    <CardTitle>Bills</CardTitle>
                    <Button onClick={() => setOpenModal(true)}>
                        + Create Bill
                    </Button>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Case</TableHead>
                                <TableHead>Client</TableHead>
                                <TableHead>Generated By</TableHead>
                                <TableHead>Status</TableHead>
                                <TableHead>Total</TableHead>
                                <TableHead>Due Date</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {bills.map((bill) => (
                                <TableRow key={bill._id}>
                                    <TableCell>{bill.case?.title}</TableCell>
                                    <TableCell>
                                        {bill.client?.username}
                                    </TableCell>
                                    <TableCell>
                                        {bill.generatedBy?.username}
                                    </TableCell>
                                    <TableCell>{bill.status}</TableCell>
                                    <TableCell>${bill.total}</TableCell>
                                    <TableCell>
                                        {bill.dueDate
                                            ? new Date(
                                                  bill.dueDate,
                                              ).toLocaleDateString()
                                            : "-"}
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>

            <CreateBillModal
                open={openModal}
                onClose={() => {
                    setOpenModal(false);
                    fetchBills();
                }}
            />
        </div>
    );
}

import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogFooter,
} from "@components/ui/dialog";
import { Input } from "@components/ui/input";
import { Label } from "@components/ui/label";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from "@components/ui/select";

function CreateBillModal({ open, onClose }) {
    const [cases, setCases] = useState([]);
    const [timeEntries, setTimeEntries] = useState([]);
    const [selectedCase, setSelectedCase] = useState("");
    const [selectedEntries, setSelectedEntries] = useState([]);
    const [dueDate, setDueDate] = useState("");
    const [notes, setNotes] = useState("");
    const [tax, setTax] = useState(0);

    useEffect(() => {
        if (open) {
            axios.get("/cases").then((res) => setCases(res.data));
        }
    }, [open]);

    const handleCaseChange = async (caseId) => {
        setSelectedCase(caseId);
        setSelectedEntries([]);
        if (caseId) {
            const res = await axios.get(`/track-time?case=${caseId}`);
            setTimeEntries(res.data);
        }
    };

    const handleRateChange = (entryId, rate) => {
        setSelectedEntries((prev) => {
            const exists = prev.find((e) => e.entryId === entryId);
            if (exists) {
                return prev.map((e) =>
                    e.entryId === entryId
                        ? { ...e, hourlyRate: Number(rate) }
                        : e,
                );
            }
            return [...prev, { entryId, hourlyRate: Number(rate) }];
        });
    };

    const handleSubmit = async () => {
        try {
            await axios.post("/billings/createBill", {
                caseId: selectedCase,
                timeEntryRates: selectedEntries,
                tax: Number(tax),
                dueDate: new Date(dueDate).toISOString(),
                notes,
            });
            onClose();
        } catch (err) {
            console.error("Error creating bill", err);
        }
    };

    return (
        <Dialog open={open} onOpenChange={onClose}>
            <DialogContent className="max-w-2xl">
                <DialogHeader>
                    <DialogTitle>Create Bill</DialogTitle>
                </DialogHeader>

                {/* Case Selection */}
                <div className="space-y-2">
                    <Label>Select Case</Label>
                    <Select onValueChange={handleCaseChange}>
                        <SelectTrigger>
                            <SelectValue placeholder="Choose a case" />
                        </SelectTrigger>
                        <SelectContent>
                            {cases.map((c) => (
                                <SelectItem key={c._id} value={c._id}>
                                    {c.title}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                </div>

                {/* Time Entries */}
                {timeEntries.length > 0 && (
                    <div className="space-y-4 mt-4">
                        <Label>Time Entries</Label>
                        {timeEntries.map(
                            (entry) =>
                                // only render if isBillable is true
                                entry.isBillable && (
                                    <div
                                        key={entry._id}
                                        className="flex items-center justify-between border p-2 rounded-lg"
                                    >
                                        <div>
                                            <p className="font-medium">
                                                {entry.activityType} -{" "}
                                                {entry.hours}h
                                            </p>
                                            <p className="text-sm text-gray-500">
                                                {entry.description}
                                            </p>
                                        </div>
                                        <Input
                                            type="number"
                                            placeholder="Hourly Rate"
                                            className="w-32"
                                            onChange={(e) =>
                                                handleRateChange(
                                                    entry._id,
                                                    e.target.value,
                                                )
                                            }
                                        />
                                    </div>
                                ),
                        )}
                    </div>
                )}

                {/* Tax */}
                <div className="mt-4 space-y-2">
                    <Label>Tax</Label>
                    <Input
                        type="number"
                        value={tax}
                        onChange={(e) => setTax(e.target.value)}
                        placeholder="Enter tax amount"
                    />
                </div>

                {/* Due Date */}
                <div className="mt-4 space-y-2">
                    <Label>Due Date</Label>
                    <Input
                        type="date"
                        value={dueDate}
                        onChange={(e) => setDueDate(e.target.value)}
                    />
                </div>

                {/* Notes */}
                <div className="mt-4 space-y-2">
                    <Label>Notes</Label>
                    <Input
                        type="text"
                        value={notes}
                        onChange={(e) => setNotes(e.target.value)}
                        placeholder="Optional notes..."
                    />
                </div>

                <DialogFooter className="mt-6">
                    <Button variant="outline" onClick={onClose}>
                        Cancel
                    </Button>
                    <Button onClick={handleSubmit}>Create Bill</Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
}
